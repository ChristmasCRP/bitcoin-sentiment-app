from openai import OpenAI
from typing import List

def make_prediction(api_key: str, price: float, rsi: float, dominance: float, market_cap: float, reddit_titles: List[str], history: List[str]) -> str:
    try:
        print("TworzÄ™ klienta OpenAI...")
        client = OpenAI(api_key=api_key)
        print("ğŸ”‘ UÅ¼ywany klucz:", api_key[:15], "...")


        print("GenerujÄ™ prompt...")
        prompt = f"""
        JesteÅ› analitykiem finansowym specjalizujÄ…cym siÄ™ w rynku kryptowalut.

        OceÅ„ obecny sentyment na rynku na podstawie poniÅ¼szych danych i okreÅ›l, czy jest on pozytywny, negatywny czy neutralny. Nie udzielaj porady inwestycyjnej. 

        Dane:
        - Obecna cena Bitcoina: {price} USD.
        - RSI: {rsi}.
        - Dominacja: {dominance}%.
        - Kapitalizacja rynku: {market_cap} USD.
        - Ostatnie tytuÅ‚y z Reddita: {', '.join(reddit_titles)}.
        - Historia cen Bitcoina (7 dni): {', '.join(history)}.

        Napisz jedno krÃ³tkie zdanie podsumowujÄ…ce sentyment rynkowy, bez uÅ¼ycia sÅ‚Ã³w 'kupuj' ani 'sprzedaj'. Nie udzielaj porady inwestycyjnej.
        """

        print("WysyÅ‚am zapytanie do OpenAI...")
       
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a financial analyst specialized in cryptocurrency."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=100,
            temperature=0.3
        )

        print("OdpowiedÅº z OpenAI otrzymana...")
        prediction = response.choices[0].message.content.strip()
        print("TreÅ›Ä‡ odpowiedzi modelu:", response.choices[0].message.content)

        if not prediction:
            prediction = "Nie udaÅ‚o siÄ™ okreÅ›liÄ‡ sentymentu."


        return prediction

    except Exception as e:
        raise Exception(f"BÅ‚Ä…d podczas przetwarzania zapytania: {str(e)}")  